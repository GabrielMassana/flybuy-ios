// Generated by Apple Swift version 4.2.1 (swiftlang-1000.11.42 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FlyBuy",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif




SWIFT_CLASS("_TtC6FlyBuy15CreateOrderInfo")
@interface CreateOrderInfo : NSObject
- (nonnull instancetype)initWithSiteID:(NSInteger)siteID partnerIdentifier:(NSString * _Nonnull)partnerIdentifier customerCarColor:(NSString * _Nullable)customerCarColor customerCarType:(NSString * _Nullable)customerCarType customerLicensePlate:(NSString * _Nullable)customerLicensePlate customerName:(NSString * _Nullable)customerName fcmToken:(NSString * _Nullable)fcmToken OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class CustomerInfo;

SWIFT_CLASS("_TtC6FlyBuy8Customer")
@interface Customer : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull token;
@property (nonatomic, readonly, strong) CustomerInfo * _Nonnull info;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6FlyBuy12CustomerInfo")
@interface CustomerInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull carType;
@property (nonatomic, readonly, copy) NSString * _Nonnull carColor;
@property (nonatomic, readonly, copy) NSString * _Nonnull licensePlate;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name carType:(NSString * _Nonnull)carType carColor:(NSString * _Nonnull)carColor licensePlate:(NSString * _Nonnull)licensePlate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Allows managing the customer: creating, storing, updating, signing-out
/// Example:
/// \code
/// // get the current FlyBuy customer
/// FlyBuy.customer.current
///
/// \endcode
SWIFT_CLASS("_TtC6FlyBuy15CustomerManager")
@interface CustomerManager : NSObject
@property (nonatomic, readonly, strong) Customer * _Nullable current;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// create a FlyBuy customer
/// \param customerInfo contains the customer details
///
/// \param callback Optional. Called with the new <code>Customer</code> and/or
/// any error encountered.
///
- (void)create:(CustomerInfo * _Nonnull)customerInfo callback:(void (^ _Nullable)(Customer * _Nullable, NSError * _Nullable))callback;
/// Signs out the FlyBuy user
- (void)signOut;
@end

typedef SWIFT_ENUM(NSInteger, CustomerState, closed) {
  CustomerStateCreated = 0,
  CustomerStateEnRoute = 1,
  CustomerStateNearby = 2,
  CustomerStateArrived = 3,
  CustomerStateWaiting = 4,
  CustomerStateCompleted = 5,
};

@class OrdersManager;

SWIFT_CLASS("_TtC6FlyBuy6FlyBuy")
@interface FlyBuy : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) OrdersManager * _Nonnull orders;)
+ (OrdersManager * _Nonnull)orders SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CustomerManager * _Nonnull customer;)
+ (CustomerManager * _Nonnull)customer SWIFT_WARN_UNUSED_RESULT;
/// Configures FlyBuy with the given options
/// Example:
/// \code
/// FlyBuy.configure(["token": "TOKEN_HERE"])
///
/// \endcode
+ (void)configure:(NSDictionary<NSString *, id> * _Nonnull)opts;
/// handles a remote notification which may contain FlyBuy order data
/// \param data contains the <code>userInfo</code> data from a remote notification
///
+ (void)handleRemoteNotification:(NSDictionary * _Nonnull)data;
/// Stops FlyBuy SDK from sending out location updates. They may start again if
/// new orders are created.
/// important:
/// This method should only be used for debugging purposes.
+ (void)stopLocationUpdates;
@end

enum OrderState : NSInteger;
@class NSNumber;

SWIFT_CLASS("_TtC6FlyBuy5Order")
@interface Order : NSObject
@property (nonatomic, readonly) NSInteger id;
@property (nonatomic, readonly) NSInteger siteID;
@property (nonatomic) enum OrderState state;
@property (nonatomic) enum CustomerState customerState;
@property (nonatomic, readonly, copy) NSString * _Nullable partnerIdentifier;
@property (nonatomic, readonly, copy) NSString * _Nullable siteName;
@property (nonatomic, readonly, copy) NSString * _Nullable siteStreetAddress;
@property (nonatomic, readonly, copy) NSString * _Nullable siteLocality;
@property (nonatomic, readonly, copy) NSString * _Nullable siteRegion;
@property (nonatomic, readonly, copy) NSString * _Nullable siteCountry;
@property (nonatomic, readonly, copy) NSString * _Nullable sitePostalCode;
@property (nonatomic, readonly, copy) NSString * _Nullable siteLongitude;
@property (nonatomic, readonly, copy) NSString * _Nullable siteLatitude;
@property (nonatomic, readonly, copy) NSString * _Nullable siteInstructions;
@property (nonatomic, readonly, copy) NSString * _Nullable siteDescription;
@property (nonatomic, readonly, copy) NSString * _Nullable siteCoverPhotoURL;
@property (nonatomic, readonly, copy) NSString * _Nullable projectAccentColor;
@property (nonatomic, readonly, copy) NSString * _Nullable projectAccentTextColor;
@property (nonatomic, readonly, copy) NSString * _Nullable projectLogoURL;
- (NSString * _Nonnull)formattedSiteAddress SWIFT_WARN_UNUSED_RESULT;
- (CLLocation * _Nullable)siteLocation SWIFT_WARN_UNUSED_RESULT;
- (NSNumber * _Nullable)siteDistanceFrom:(CLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
- (BOOL)open SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6FlyBuy10OrderEvent")
@interface OrderEvent : NSObject
- (nonnull instancetype)initWithOrder:(Order * _Nonnull)order customerState:(enum CustomerState)customerState etaSeconds:(NSNumber * _Nullable)etaSeconds OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, OrderState, closed) {
  OrderStateCreated = 0,
  OrderStateReady = 1,
  OrderStateDelayed = 2,
  OrderStateCancelled = 3,
  OrderStateCompleted = 4,
  OrderStateGone = 5,
};


/// Allows fetching the list of orders, creating a new order, or creating
/// order events.
/// Example:
/// \code
/// // fetch orders from FlyBuy
/// FlyBuy.orders.fetch()
///
/// \endcode
SWIFT_CLASS("_TtC6FlyBuy13OrdersManager")
@interface OrdersManager : NSObject
/// contains a list of all the orders
@property (nonatomic, readonly, copy) NSArray<Order *> * _Nullable all;
/// contains a list of all currently open orders
@property (nonatomic, readonly, copy) NSArray<Order *> * _Nullable open;
/// fetches the list of orders from the FlyBuy web API
/// \param callback will get called on completion with the array of
/// orders and any errors encountered. Optional.
///
- (void)fetchWithCallback:(void (^ _Nullable)(NSArray<Order *> * _Nullable, NSError * _Nullable))callback;
/// creates an order using the FlyBuy web API
/// \param info the customer and order info necessary to create an order
///
/// \param callback called once either an order is created or an error is encountered
///
- (void)createWithInfo:(CreateOrderInfo * _Nonnull)info callback:(void (^ _Nullable)(Order * _Nullable, NSError * _Nullable))callback;
/// creates an order event using the Flybuy web API
/// \param info contains the information needed to create the event
///
/// \param callback Optional. called at completion with the order and any
/// errors encountered.
///
- (void)eventWithInfo:(OrderEvent * _Nonnull)info callback:(void (^ _Nullable)(Order * _Nullable, NSError * _Nullable))callback;
/// creates an order event that sets the customer state
/// \param order specifies which order this event relates to
///
/// \param customerState contains the customer state which should be set on the order
///
/// \param callback Optional. Gets called at completion with the order and any
/// error encountered.
///
- (void)eventWithOrder:(Order * _Nonnull)order customerState:(enum CustomerState)customerState callback:(void (^ _Nullable)(Order * _Nullable, NSError * _Nullable))callback;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
